unit MyFirstProgram;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus, Vcl.StdCtrls, Data.DB,
  Data.Win.ADODB, Vcl.ExtCtrls, Vcl.Buttons, Vcl.DBCtrls, Vcl.Grids, Vcl.DBGrids,
  Data.FMTBcd, Data.SqlExpr, Datasnap.DBClient;

type
  TForm1 = class(TForm)
    ADOConnection1: TADOConnection;
    DataSource: TDataSource;
    Termékek: TLabel;
    ADOQuery1: TADOQuery;
    ADOQuery1termék_id: TAutoIncField;
    ADOQuery1cikkszám: TIntegerField;
    ADOQuery1megnevezés: TStringField;
    ADOQuery1áfa_kulcs: TBCDField;
    ADOQuery1eladási_egységár: TBCDField;
    DBGrid1: TDBGrid;
    DBNavigator1: TDBNavigator;
    ADOQuery2: TADOQuery;
    Tételek: TADOConnection;
    DataSource1: TDataSource;
    DBNavigator2: TDBNavigator;
    Button1: TButton;
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    Edit1: TEdit;
    ADOQuery3: TADOQuery;
    ADOQuery4: TADOQuery;
    DBGrid3: TDBGrid;
    ADOQuery5: TADOQuery;
    ADOConnection3: TADOConnection;
    DataSource2: TDataSource;
    Label1: TLabel;
    ADOQuery6: TADOQuery;
    Edit2: TEdit;
    Label2: TLabel;
    ADOQuery7: TADOQuery;
    Label3: TLabel;
    Label10: TEdit;
    ADOQuery8: TADOQuery;
    Edit3: TEdit;
    ADOQuery9: TADOQuery;
    Label5: TLabel;
    Edit4: TEdit;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Memo1: TMemo;
    Button2: TButton;
    ADOQuery10: TADOQuery;
    Edit5: TEdit;
    Label11: TLabel;
    ADOQuery11: TADOQuery;
    Edit6: TEdit;
    Edit7: TEdit;
    ADOQuery12: TADOQuery;
    Edit8: TEdit;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    DBNavigator3: TDBNavigator;
    Edit9: TEdit;
    Label4: TLabel;
    ADOQuery13: TADOQuery;
    DBGrid2: TDBGrid;
    Edit10: TEdit;
    ADOQuery14: TADOQuery;
    Label15: TLabel;
    DBGrid4: TDBGrid;
    ADOQuery15: TADOQuery;
    DataSource3: TDataSource;
    DBNavigator4: TDBNavigator;
    procedure PopulateComboBoxes(Sender: TObject);
    procedure SelectButtonClick(Sender : TObject);
    procedure AssignTételek(Sender: TObject);
    procedure AssignTermék(Sender : TObject);
    procedure AssignPartner(Sender: TObject);
    procedure AssignEngedmény(Sender : TObject);
    procedure AssignEgységár(Sender : TObject);
    procedure ChangeEngedmény(Sender: TObject);
    procedure AssignMennyiség(Sender: TObject);
    procedure AssignMegjegyzés(Sender: TObject);
    procedure AssignPartnerCím(Sender : TObject);
    procedure CreateTétel(Sender: TObject);
    procedure AssignÁfaKulcs(Sender : TObject);
    procedure CalculateNettó(Sender: TObject);
    procedure CalculateBruttó(Sender : TObject);
    procedure CalculateÁrWithKedvezmény(Sender : TObject);
    procedure QuitApplication(Sender: TObject);
    procedure ErrorHandling(query : TADOQuery; fieldName : string);
    procedure CreateReport(Sender : TObject);
    procedure CalculateSumSpending(Sender : TObject);
    procedure ConnectToDataBase(Sender : TObject);

  private
    { Private declarations }
  public
    { Public declarations }
    var partner_id : integer;
    var partner : string;
    var termék : string;
    var termék_id: integer;
    var mennyiség : integer;
    var egységár : double;
    var árWithKedvezmény : currency;
    var megjegyzés : string;
    var engedmény :  currency;
    var cím : string;
    var nettó : currency;
    var bruttó : currency;
    var áfakulcs : currency;
    var adatbázisNév : string;
  end;

var
  Form1: TForm1;

implementation

{$R *.dfm}


procedure TForm1.ConnectToDataBase(Sender : TObject);

begin

  var serverName, databaseName, username, password, connectionString, sanyi: string;

  serverName := InputBox('Adatbázis szerver', 'Kérjük adja meg az adatbázis szerver nevét:', '');

  databaseName := InputBox('AdatBázis neve', 'Kérjük adja meg az adatbázis nevét:', '');
  adatbázisNév := databaseName;

  //username := InputBox('Username', 'Please enter the username:', '');
  //password := InputBox('Password', 'Please enter the password:', '');

  connectionString := 'Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=' + dataBaseName  + ';Data Source=' + ServerName;

  // Display the constructed connection string (for demonstration purposes)
  ShowMessage('Connection string: ' + connectionString);

  //connect and display
  Tételek.ConnectionString := connectionString;
  ADOQuery2.Active := true;
  ADOQuery15.Active := true;

end;

procedure TForm1.CalculateÁrWithKedvezmény(Sender: TObject);
begin
    if (nettó > 0) and (bruttó > 0) and (engedmény > 0) then
      begin
        var kedvezményesÁr:= CurrToStr(nettó - (bruttó/ 100 * engedmény));
        árWithKedvezmény := nettó - (bruttó/ 100 * engedmény);
        Edit8.Text := kedvezményesÁr;
      end
end;

procedure TForm1.CalculateBruttó(Sender: TObject);
begin
    if(egységár > 0) and (mennyiség > 0) then
      begin
        bruttó :=  egységár * mennyiség;
        Edit7.Text := CurrToStr(bruttó);
      end
end;

procedure TForm1.CalculateNettó(Sender: TObject);
begin
    if (egységár > 0) and (mennyiség > 0) and (áfakulcs > 0) then
      begin
        nettó := (egységár * mennyiség) - ((egységár * mennyiség) / 100 * áfakulcs);
        Edit6.Text := CurrToStr(nettó);
      end
end;

procedure TForm1.AssignÁfaKulcs(Sender: TObject);
begin
    ADOQuery12.SQL.Text := 'SELECT áfa_kulcs FROM Vector.production.Termékek WHERE termék_id = :termékID';
    ADOQuery12.Parameters.ParamByName('termékID').Value := termék_id;

    ADOQuery12.Open;
    //
      ErrorHandling(ADOQuery12, 'áfa_kulcs');
      áfakulcs := StrToCurr(ADOQuery12.FieldByName('áfa_kulcs').AsString);
    //
    ADOQuery12.Close;
end;

procedure TForm1.AssignPartnerCím(Sender : TObject);
begin
    ADOQuery11.SQL.Text := 'SELECT [irányítószám], [utca], [házszám] FROM Vector.production.Partnerek WHERE partner_id = :partnerID';
    ADOQuery11.Parameters.ParamByName('partnerID').Value := partner_id;

    ADOQuery11.Open;
    //
      ErrorHandling(ADOQuery11, 'irányítószám');
      ErrorHandling(ADOQuery11, 'utca');
      ErrorHandling(ADOQuery11, 'házszám');
      Edit5.Text := ADOQuery11.FieldByName('irányítószám').AsString + '.' + ' '
      + ADOQuery11.FieldByName('utca').AsString  + ' ' + 'utca' + '.' + ' ' + ADOQuery11.FieldByName('házszám').AsString + '.';
    //
    ADOQuery11.Close;

    Edit5.Enabled := false;
end;

procedure TForm1.AssignEgységár(Sender : TObject);
begin
    ADOQuery9.SQL.Text := 'SELECT eladási_egységár FROM Vector.production.Termékek WHERE termék_id = :termékID';
    ADOQuery9.Parameters.ParamByName('termékID').Value := termék_id;

    ADOQuery9.Open;
    //
      ErrorHandling(ADOQuery9, 'eladási_egységár');
      var eladási_egységár : currency := StrToCurr(ADOQuery9.FieldByName('eladási_egységár').AsString);
      Edit3.Text := CurrToStr(eladási_egységár);
    //
    ADOQuery9.Close;

    egységár := StrToCurr(Edit3.Text);
    Edit3.Enabled := false;
end;

procedure TForm1.AssignEngedmény(Sender: TObject);
begin
    ADOQuery8.SQL.Text := 'SELECT engedmény FROM Vector.production.Partnerek WHERE partner_id = :partnerID';
    ADOQuery8.Parameters.ParamByName('partnerID').Value := partner_id;

    ADOQuery8.Open;
    //
      ErrorHandling(ADOQuery8, 'engedmény');
         var value : TField := ADOQUery8.FieldByName('engedmény');
      if value.IsNull then
      begin
          Label10.Text :='0';
      end
      else
      Label10.Text := ADOQuery8.FieldByName('engedmény').AsString;

    //
    ADOQuery8.Close;

    engedmény := StrToCurr(Label10.Text);

end;

procedure TForm1.AssignMegjegyzés(Sender: TObject);
begin
    megjegyzés := Memo1.Text;
end;

procedure TForm1.AssignMennyiség(Sender: TObject);
begin
    if Edit4.Text = '' then
      mennyiség := 0
    else
      mennyiség := StrToInt(Edit4.Text);

    //calculate new netto and brutto
    CalculateBruttó(Sender);
    CalculateNettó(Sender);
    CalculateÁrWithKedvezmény(Sender);
end;

procedure TForm1.ChangeEngedmény(Sender : TObject);
begin
    if Label10.Text = '' then
      engedmény := 0
    else
      engedmény := StrToInt(Label10.Text);

    //calculate new netto and brutto
    CalculateBruttó(Sender);
    CalculateNettó(Sender);
    CalculateÁrWithKedvezmény(Sender);
end;

procedure TForm1.CreateTétel(Sender: TObject);
begin
    ADOQuery10.SQL.Text := 'INSERT INTO Vector.production.Tételek(partner_id, partner_név, termék, mennyiség, egységár, engedmény, megjegyzés, termék_id, netto_forgamli_érték) Values(:partner_id, :partner_név, :termék, :mennyiség, :egységár, :engedmény, :megjegyzés, :termék_id, :netto_forgamli_érték)';

    if  (partner_id = 0) or (partner = '') or (termék = '') or (mennyiség = 0)
    or (egységár = 0) or(engedmény = 0) or (megjegyzés = '') or (termék_id = 0)
    then
        begin
          ShowMessage('Töltse ki az összes beviteli adatot.');
        end
    else
        begin
            ADOQuery10.Parameters.ParamByName('partner_id').Value := partner_id;
            ADOQuery10.Parameters.ParamByName('partner_név').Value := partner;
            ADOQuery10.Parameters.ParamByName('termék').Value := termék;
            ADOQuery10.Parameters.ParamByName('mennyiség').Value := mennyiség;
            ADOQuery10.Parameters.ParamByName('egységár').Value := egységár;
            ADOQuery10.Parameters.ParamByName('engedmény').Value := CurrToStr(engedmény);
            ADOQuery10.Parameters.ParamByName('megjegyzés').Value := megjegyzés;
            ADOQuery10.Parameters.ParamByName('termék_id').Value := termék_id;
            var curr : currency :=  mennyiség * egységár - (mennyiség * egységár / 100 * áfakulcs);
            ADOQuery10.Parameters.ParamByName('netto_forgamli_érték').Value := CurrToStr(curr);
        end;

     try
      ADOQuery10.ExecSQL;
      ShowMessage('Adatok felvétele sikeres volt.');
    except
      on E: Exception do
        ShowMessage('Adatok felvétele nem sikerült: ' + E.Message);
    end;

   ADOQuery10.SQL.Text := 'SELECT * FROM Vector.production.Tételek';
   ADOQuery10.ExecSQL;

   ADOQuery2.Open;
   CreateReport(Sender);
   AssignTételek(Sender);

end;

procedure TForm1.AssignPartner(Sender: TObject);
begin
     var partner_id : string;
     ADOQuery7.SQL.Text := 'SELECT partner_id FROM Vector.production.Partnerek WHERE név = :partnerName';
     ADOQuery7.Parameters.ParamByName('partnerName').Value := ComboBox2.Text;

     ADOQuery7.Open;
     //
       ErrorHandling(ADOQuery7, 'partner_id');
       if not ADOQuery7.Eof then
        partner_id := ADOQuery7.FieldByName('partner_id').AsString
       else
        partner_id := 'Nincs ilyen partner.';

     //
     ADOQuery7.Close;

     Form1.partner_id := partner_id.ToInteger();
     Edit2.Text := partner_id;
     partner := ComboBox2.Text;
     //ENGEDMÉNY

    AssignEngedmény(Sender);
    AssignPartnerCím(Sender);
    CalculateSumSpending(Sender);
    CreateReport(Sender);

    if termék <> '' then
    begin
         CalculateBruttó(Sender);
         CalculateNettó(Sender);
         CalculateÁrWithKedvezmény(Sender);

    end;

end;

procedure TForm1.AssignTermék(Sender : TObject);
begin
    var termék_id: string;

    ADOQuery6.SQL.Text := 'SELECT termék_id FROM Vector.production.Termékek WHERE megnevezés = :productName';
    ADOQuery6.Parameters.ParamByName('productName').Value := ComboBox1.Text;

    ADOQuery6.Open;
    //
    ErrorHandling(ADOQuery6, 'termék_id');
    if not ADOQuery6.Eof then
      termék_id := ADOQuery6.FieldByName('termék_id').AsString
    else
      termék_id := 'No partner found';
    //
    ADOQuery6.Close;

    Form1.termék_id := termék_id.ToInteger();
    termék := ComboBox1.Text;
    Edit1.Text := termék_id;

    AssignÁfaKulcs(Sender);
    AssignEgységár(Sender);
    Edit4.Text := IntToStr(1);

    if partner <> '' then
    begin
         CalculateBruttó(Sender);
         CalculateNettó(Sender);
         CalculateÁrWithKedvezmény(Sender);
    end;

end;

procedure TForm1.PopulateComboBoxes(Sender: TObject);
begin

    ConnectToDataBase(Sender);
    Form1.ADOQuery3.SQL.Text := 'SELECT megnevezés FROM ' + adatbázisNév + '.production.Termékek';
    Form1.ADOQuery3.Open;
    //
    while not Form1.ADOQuery3.EOF do
    begin
      Form1.ComboBox1.Items.Add(Form1.ADOQuery3.FieldByName('megnevezés').AsString);
      Form1.ADOQuery3.Next;
    end;
    //
    Form1.ADOQuery3.Close;

    Form1.ADOQuery4.SQL.Text := 'SELECT név FROM ' + adatbázisNév + '.production.Partnerek';
    Form1.ADOQuery4.Open;
    //
    while not Form1.ADOQuery4.EOF do
    begin
      Form1.ComboBox2.Items.Add(Form1.ADOQuery4.FieldByName('név').AsString);
      Form1.ADOQuery4.Next;
    end;
    //
    Form1.ADOQuery4.Close;

    CalculateSumSpending(Sender);

end;

procedure TForm1.AssignTételek(Sender: TObject);
begin
    ADOQuery15.SQL.Text := 'SELECT * FROM ' + adatbázisNév + '.production.Tételek';
    if not ADOQuery15.Eof then
      begin
        ADOQuery15.Open;
        ADOQuery15.Close;
      end
  else
    ShowMessage('Tételek táblázatot nem  sikerült betölteni.');

    ADOQuery15.Open;
end;

 procedure TForm1.CreateReport(Sender: TObject);
 begin
      ADOQuery2.SQL.Text := 'SELECT * FROM Vector.production.Tételek WHERE partner_id = :partnerID';
      ADOQuery2.Parameters.ParamByName('partnerID').Value := partner_id;

      var sum : currency := 0;
      var áfa : currency := 0 ;
      var valueWithÁfa : currency;
      var sumNettó : currency := 0;
      var netto : currency := 0;
      var currentValue : currency := 0;

      ADOQuery2.Open;
      //
        try
        while not ADOQuery2.Eof do
            begin
              //assign termék
              ADOQuery13.SQL.Text := 'SELECT áfa_kulcs FROM Vector.production.Termékek WHERE termék_id = :termékID';
              ADOQuery13.Parameters.ParamByName('termékID').Value := ADOQuery2.FieldByName('termék_id').Value;

              //assign áfa
              ADOQuery13.Open;
              áfa := ADOQuery13.FieldByName('áfa_kulcs').Value;
              ADOQuery13.Close;

              //calculate sum
              sum := sum + ADOQuery2.FieldByName('egységár').Value * ADOQuery2.FieldByName('mennyiség').Value;

              //netto forgalmi érték
              currentValue :=  ADOQuery2.FieldByName('mennyiség').Value *
              ADOQuery2.FieldByName('egységár').Value -
              ( (ADOQuery2.FieldByName('mennyiség').Value *ADOQuery2.FieldByName('egységár').Value) /100 * áfa);

              sumNettó := sumNettó  + currentValue;

              ADOQuery2.Next;

            end;

        finally
          // Do something with the collected values
          Edit9.Text := CurrToStr(sumNettó);

          //calculate spending of all clients
          CalculateSumSpending(Sender);

        end;
      //
      ADOQuery2.Close;

      ADOQuery2.Open;

 end;

 procedure TForm1.CalculateSumSpending(Sender: TObject);
 begin
    ADOQuery14.SQL.Text := 'SELECT netto_forgamli_érték FROM Vector.production.Tételek';

    var sum : currency := 0;

        ADOQuery14.Open;
        //
        ErrorHandling(ADOQuery14, 'netto_forgamli_érték');
        while not ADOQuery14.Eof do
        begin

            sum := sum + ADOQuery14.FieldByName('netto_forgamli_érték').Value;
            ADOQuery14.Next;
        end;
        //
        ADOQuery14.Close;

        Edit10.Text := CurrToStr(sum);

 end;

procedure TForm1.ErrorHandling(query : TADOQuery; fieldName : string);
begin
    query.Open;
      if query.Eof then
        begin
          ShowMessage('Nincsen ilyen rekord.');
          Exit;
        end;
    try
      var queryValue : string := query.FieldByName(fieldName).AsString
    except
      on E: Exception do
      begin
        ShowMessage('Hiba lépett fel a ${fieldName} mezõ keresése közben.');
        Exit
      end;
    end;
end;

procedure TForm1.SelectButtonClick(Sender: TObject);
begin
          
    //refresh data
    ADOQuery2.Open;
    ADOQuery2.Close;
end;

procedure TForm1.QuitApplication(Sender: TObject);
begin
    Application.Terminate();
end;

end.
